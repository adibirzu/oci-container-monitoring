#!/bin/bash
# OCI Container Instance Monitoring Configuration Template
# This is a TEMPLATE file - DO NOT EDIT DIRECTLY
# Run ./scripts/setup-environment.sh to generate your custom oci-monitoring.env file

#######################################
# OCI Authentication & Region Settings
#######################################
# OCI CLI Profile to use (from ~/.oci/config)
export OCI_CLI_PROFILE="DEFAULT"

# OCI Region (e.g., us-ashburn-1, us-phoenix-1, eu-frankfurt-1)
export OCI_REGION="us-ashburn-1"

# Tenancy OCID
export OCI_TENANCY_OCID=""

# Compartment OCID where resources will be created
export OCI_COMPARTMENT_OCID=""

#######################################
# Container Instance Configuration
#######################################
# Container Instance Display Name
export CONTAINER_INSTANCE_NAME="monitoring-demo-instance"

# Container Image to Deploy (Docker Hub or OCIR)
# Examples:
#   - nginx:latest
#   - ghcr.io/organization/image:tag
#   - <region>.ocir.io/<tenancy-namespace>/<repo>:<tag>
export CONTAINER_IMAGE="nginx:latest"

# Container Instance Shape (CPU and Memory)
# Available shapes: CI.Standard.E3.Flex, CI.Standard.E4.Flex
export CONTAINER_SHAPE="CI.Standard.E4.Flex"

# Number of OCPUs (Minimum: 1, Maximum: 64)
export CONTAINER_OCPUS="1"

# Memory in GB (Minimum: 1GB per OCPU, Maximum: 64GB per OCPU)
export CONTAINER_MEMORY_GB="4"

# Number of container replicas to deploy
export CONTAINER_COUNT="1"

# Container Port to expose (e.g., 80 for nginx, 8080 for tomcat)
export CONTAINER_PORT="80"

# Environment variables to pass to container (comma-separated KEY=VALUE pairs)
# Example: "ENV=production,DEBUG=false,API_KEY=secret"
export CONTAINER_ENV_VARS=""

# Container Instance Availability Domain (1, 2, or 3)
export AVAILABILITY_DOMAIN="1"

#######################################
# Networking Configuration
#######################################
# VCN OCID (Virtual Cloud Network)
export VCN_OCID=""

# Subnet OCID for Container Instance
export SUBNET_OCID=""

# Assign Public IP to Container Instance (true/false)
export ASSIGN_PUBLIC_IP="true"

# Network Security Group OCIDs (comma-separated, optional)
export NSG_OCIDS=""

#######################################
# Logging Configuration
#######################################
# Enable Container Logging (true/false)
export ENABLE_LOGGING="true"

# Log Group Display Name
export LOG_GROUP_NAME="container-instance-logs"

# Log Retention in Days (30, 60, 90, 120, 180, 365)
export LOG_RETENTION_DAYS="30"

# Enable Audit Logging (true/false)
export ENABLE_AUDIT_LOGS="true"

# Log Level for container stdout/stderr (INFO, WARNING, ERROR, DEBUG)
export LOG_LEVEL="INFO"

#######################################
# Management Agent Configuration
#######################################
# Enable Management Agent for Prometheus Metrics (true/false)
export ENABLE_MANAGEMENT_AGENT="true"

# Management Agent Display Name
export MGMT_AGENT_NAME="container-prometheus-agent"

# Management Agent Install Key Display Name
export MGMT_AGENT_INSTALL_KEY_NAME="container-agent-key"

# Prometheus Scrape Interval in seconds
export PROMETHEUS_SCRAPE_INTERVAL="60"

# Prometheus Metrics Port (container must expose /metrics endpoint)
export PROMETHEUS_METRICS_PORT="9090"

# Prometheus Metrics Path
export PROMETHEUS_METRICS_PATH="/metrics"

# Management Agent Version (leave empty for latest)
export MGMT_AGENT_VERSION=""

#######################################
# Monitoring & Dashboards
#######################################
# Enable Dashboard Creation (true/false)
export CREATE_DASHBOARD="true"

# Dashboard Name
export DASHBOARD_NAME="Container Instance Monitoring Dashboard"

# Metrics Namespace for Custom Metrics
export METRICS_NAMESPACE="container_monitoring"

# Alarm Notification Topic OCID (optional, for alerting)
export NOTIFICATION_TOPIC_OCID=""

# Enable Alarms (true/false)
export ENABLE_ALARMS="false"

# CPU Threshold for Alarm (percentage)
export CPU_ALARM_THRESHOLD="80"

# Memory Threshold for Alarm (percentage)
export MEMORY_ALARM_THRESHOLD="80"

#######################################
# Terraform Configuration
#######################################
# Terraform State Backend (local/oci)
export TF_BACKEND="local"

# If using OCI backend, specify bucket name
export TF_STATE_BUCKET=""

# Terraform Workspace (dev/staging/production)
export TF_WORKSPACE="dev"

#######################################
# Image Registry Authentication (OCIR)
#######################################
# Required only if using private OCIR images
export OCIR_USERNAME=""
export OCIR_AUTH_TOKEN=""

#######################################
# Tags & Metadata
#######################################
# Freeform Tags (JSON format)
# Example: '{"Environment":"Development","Project":"Monitoring","Owner":"DevOps"}'
export FREEFORM_TAGS='{"Environment":"Development","ManagedBy":"Terraform"}'

# Defined Tags (JSON format, requires tag namespace)
# Example: '{"Operations.CostCenter":"1234","Operations.Project":"MonitoringPOC"}'
export DEFINED_TAGS='{}'

#######################################
# Script Behavior
#######################################
# Enable Verbose Output (true/false)
export VERBOSE="false"

# Enable Dry Run Mode - show what would be done without executing (true/false)
export DRY_RUN="false"

# Auto-approve Terraform changes (true/false) - USE WITH CAUTION
export AUTO_APPROVE="false"

# Cleanup on failure (true/false)
export CLEANUP_ON_FAILURE="false"

#######################################
# Advanced Settings
#######################################
# Terraform Plan Output File
export TF_PLAN_FILE="tfplan"

# Maximum wait time for resource creation (seconds)
export MAX_WAIT_TIME="600"

# Retry attempts for transient failures
export RETRY_ATTEMPTS="3"

# Retry delay in seconds
export RETRY_DELAY="10"
